#Each vector should have at least 5 data elements
# the vectors should have different lengths and contain at least 2 different types of data
#print the list
#check the structure of the list
lv1 <- c("apple", "pear", "grapes", 5, 5)
lv2 <- c(TRUE, FALSE, TRUE, FALSE,"A", "B")
lv3 <- c("Hi", "Bye,", "Hello", "Hey", T, F,F)
lv4 <- c(100, 15, 9, 200, TRUE, FALSE, FALSE, FALSE)
list1 <-list(lv1, lv2, lv3, lv4)
list1
is.list(list1)
#Task 8
#create another list containing the list you created in task 7
#print the list
list2 <- list(lv1, lv2, lv3, lv4,list1)
list2
m2 <- matrix(c("Marylyn", "May", "Pink", "Chibuzo", "Uzoukwu", "Dancer", "Singer", "Igbo", "Girl", "Sister", "Friend", "Runner", "Gemini", "Baker","SWE", "Senior", "Kind", "Traveler", "Brunch", "Model"), nrow=4)
m2
typeof(m2)
is.matrix(m2)
a1 <- array(c(1:90), c(3,10,3))
a1
typeof(a1)
is.array(a1)
a2 <- array(c("Pink", "Red", "Blue", "Orange", "Yellow", "Purple", "Green", "Black", "Brown", "White",
"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten",
"Bread", "Bagel", "Muffin", "Loaf", "Cupcake", "Yogurt", "Milk", "Cheese", "Coffee", "Tea"),c(3,10,3))
a2
typeof(a2)
is.array(a2)
(co1 <- c(1, "a", F)) #parentheses will automatically print the output
typeof(co1) #will default to least restrictive data type
(co2 <-5)
typeof(co2)
(co3 <- as.integer(co2))
typeof(co3)
(co4 <- c("1","2","3"))
typeof(co4)
(co5 <- as.numeric(co4))
typeof(co5)
b <- 1:100
b
source("C:/Users/Maryl/Downloads/Example Code 2 - Coercion, factors, accesing data.R")
v <- 1:10
v <- 1:10
v
v1 <- 1:10
v1
typeof(v1)
(v2 <-as.interger(v1))
(v2 <- as.interger(v1))
(v2 <- as.integer(v1))
type(v2)
(v2 <- as.integer(v1))
typeof(v2)
v1 <- 1:10.5
v1
v1 <- 1:11.5
v1
typeof(v1)
v1 <- 1:10
v1
typeof(v1)
(v2 <- as.integer(v1))
typeof(v2)
seq
(s1 <- seq(10)) # the same as c(1:10)
(s2 <- seq (32,0, by =-4))
(v1a <- as.integer(v1))
typeof(v1a)
(v2 <-seq(100,10, by = 8))
(v2 <-seq(100,10, by = 8))
(v2 <-seq(10,100, by = 8))
typeof(v2
(v2 <-seq(10,100, by = 8))
typeof(v2
(v2 <-seq(10,100, by = 8))
typeof(v2
(v2 <-seq(10,100, by = 8))
typeof(v2)
(v2 <-seq(10,100, by = -8))
(s1 <- seq(10)) # the same as c(1:10)
(s2 <- seq (32,0, by =-4))
(c <- 100:1)
source("~/Lab 2 -Uzoukwu.R")
(v2 <-10:100)
v2
(v2 <-seq(100))
v2
?seq
(v2 <-seq(10,100, by 90))
(v2 <-seq(10,100, by = 90))
v2
(v2 <-seq(10,100, by = 8, length.out =100))
v2 <-seq(10, 100, by = 8, length.out =100)
v2
v2 <-seq(from = 10, by = 8, length.out =100)
v2
typeof(v2)
(r1 <- rep("freshman",3))
(r2 <- rep(c("freshman","junior", "seniors"),4))
(r3 <- rep(c("freshman","junior", "seniors"),each = 4))
(v3 <- rep(c("Pink", "Marylyn", "Torquoise", "Apples", "Grapes", "Strawberries"), 10))
typeof(v3)
#check output
v3 <- rep(c("Pink", "Marylyn", "Torquoise", "Apples", "Grapes", "Strawberries"), 10)
typeof(v3)
v3 <- rep(c("Pink", "Marylyn", "Torquoise", "Apples", "Grapes", "Strawberries"), 10)
v3
v3 <- rep(c("Pink", "Marylyn", "Torquoise", "Apples", "Grapes", "Strawberries"), each = 10)
v3
typeof(v3)
v3 <- rep(c("Pink", "Marylyn", "Torquoise", "Apples", "Grapes", "Strawberries"), 10)
v3
m4 <- matrix(1:20, nrow = 5)
m4
is.matrx(m4)
is.matrix(m4)
df4 <- as.data.frame(m4)
df4
is.data.frame(df4)
typeof(m4)
typeof(df4)
(v1 <- 1:3)
v3 <- rep(c("Pink", "Marylyn", "Torquoise", "Apples", "Grapes", "Strawberries"), 10)
(v1 <- 1:3)
typeof(v1)
(w <- 1:9)
typeof(w)
(df1 <- cbind.data.frame(v1,w)) # v1 is repeated to make the 2 columns of equal length
typeof(df1$v1) # the $ sign select the specific column/attribute
str(df1) # shows the structure of the data frame
(v2 <- as.factor(c(1:3)))
(df2 <- cbind.data.frame(v2,w)) #output looks the same as df1
typeof(df2$v2)
str(df2) # v2 is factor
(v3 <- c(1:3))
(df3 <- cbind.data.frame(v3,w))
?factor
(df3$v3 <- factor(df3$v3,levels = c(1,2,3)))
typeof(df3$v3)
str(df3
(v4 <- c(1:3))
(df4 <- cbind.data.frame(v4,w))
df4$v4 <- factor(df4$v4,
# create labels of the factor
(v4 <- c(1:3))
(df4 <- cbind.data.frame(v4,w))
df4$v4 <- factor(df4$v4,
levels = c(1,2,3),
labels = c("SAS","SPSS","MatLab"))
df4
typeof(df4$v4)
str(df4)
df4 <- as.data.frame(m4)
v5a <- 1:4
v5b <- 1:20
df5a <- cbind.data.frame(v5a,v5b)
df5a
v5a <- 1:4
v5b <- 1:20
v5bc <- 1:5
df5a <- cbind.data.frame(v5a,v5b,vbc)
v5a <- 1:4
v5b <- 1:20
v5bc <- 1:5
df5a <- cbind.data.frame(v5a,v5b,v5bc)
df5a
v4af <- as.factor(c(1:4))
v4af
v5af <- as.factor(c(1:4))
v5af
df52 <- cbind.data.frame(v)
df52
v5a <- 1:4
v5b <- 1:20
v5bc <- 1:5
df51 <- cbind.data.frame(v5a,v5b,v5c)
v5a <- 1:4
v5b <- 1:20
v5c <- 1:5
df51 <- cbind.data.frame(v5a,v5b,v5c)
df51
v5af <- as.factor(c(1:4))
v5af
df52 <- cbind.data.frame(v5af, v5b, v5c)
df52
(v1 <- 1:3)
typeof(v1)
(w <- 1:9)
(df1 <- cbind.data.frame(v1,w)) # v1 is repeated to make the 2 columns of equal length
typeof(df1$v1) # the $ sign select the specific column/attribute
str(df1)
(v2 <- as.factor(c(1:3)))
(df2 <- cbind.data.frame(v2,w)) #output looks the same as df1
typeof(df2$v2)
str(df2)
(v3 <- c(1:3))
(df3 <- cbind.data.frame(v3,w))
?factor
(df3$v3 <- factor(df3$v3,levels = c(1,2,3)))
typeof(df3$v3)
str(df3)
str(df52)
(v4 <- c(1:3))
(df4 <- cbind.data.frame(v4,w))
df4$v4 <- factor(df4$v4,
levels = c(1,2,3),
labels = c("SAS","SPSS","MatLab"))
df4
typeof(df4$v4)
str(df4)
v6 <- c(1:4)
df6 <- cbind.data.frame(v6, v5b, v5c)
df5$v6 <- factor(df6$v6,
levels = c(1,2,3,4),
lables = c("Bread", "Yogurt", "Milk", "Coffee"))
v6 <- c(1:4)
df6 <- cbind.data.frame(v6, v5b, v5c)
df5$v6 <- factor(df6$v6,
levels = c(1,2,3,4),
lables = c("Bread", "Yogurt", "Milk", "Coffee"))
v6 <- c(1:4)
df6 <- cbind.data.frame(v6, v5b, v5c)
df5$v6 <- factor(df6$v6,
levels = c(1,2,3,4),
labels = c("Bread", "Yogurt", "Milk", "Coffee"))
df6 <- cbind.data.frame(v5af, v5b, v5c)
df5$v6 <- factor(df6$v5af,
levels = c(1,2,3,4),
labels = c("Bread", "Yogurt", "Milk", "Coffee"))
df6 <- cbind.data.frame(v5af, v5b, v5c)
df6$v6 <- factor(df6$v5af,
levels = c(1,2,3,4),
labels = c("Bread", "Yogurt", "Milk", "Coffee"))
df6
typeof(df6$v6)
str(df6)
df6 <- cbind.data.frame(v5af, v5b, v5c)
df6$v6 <- factor(df6$v5af,
levels = c(1,2,3,4),
labels = c("Bread", "Yogurt", "Milk", "Coffee"))
df6
typeof(df6$v5af)
str(df6)
(v4 <- c(1:3))
(df4 <- cbind.data.frame(v4,w))
df4$v4 <- factor(df4$v4,
levels = c(1,2,3),
labels = c("SAS","SPSS","MatLab"))
df4
typeof(df4$v4)
str(df4) #shows value labels
df6 <- cbind.data.frame(v5af, v5b, v5c)
df6$v5af <- factor(df6$v5af,
levels = c(1,2,3,4),
labels = c("Bread", "Yogurt", "Milk", "Coffee"))
df6
typeof(df6$v5af)
str(df6)
(v5 <- c(1:3))
(df5 <- cbind.data.frame(v5,w))
df5$v5 <- factor(df5$v5,
levels = c(3,1,2),
labels = c("SAS","SPSS","MatLab"))
df5
typeof(df5$v5)
str(df5)
df6 <- cbind.data.frame(v5af, v5b, v5c)
df6$v5af <- factor(df6$v5af,
levels = c(1,2,3,4),
labels = c("Bread", "Yogurt", "Milk", "Coffee"))
df6
typeof(df6$v5af)
str(df6)
write.table(df6, "export.txt", row.names = F, sep = '\t')
df_txt <- import("export.txt")
write.table(df6, "export.txt", row.names = F, sep = '\t')
df_txt <- import("export.txt")
library(rio)
write.table(df6, "export.txt", row.names = F, sep = '\t')
df_txt <- import("export.txt")
write.csv(df6, "export.csv", row.names=F)
df_csv <- import("export.csv")
v1 <- 1:10
v1
typeof(v1)
(v1a <- as.integer(v1))
v1a
typeof(v1a)
v1 <- -1:-10
v1
typeof(v1)
(co2 <-5)
typeof(co2)
(co3 <- as.integer(co2))
typeof(co3)
v1 <- 1:10
v1
typeof(v1)
v2 <-seq(from = 10, by = 8, length.out = 100)
v2
typeof(v2)
v3 <- rep(c("Pink", "Marylyn", "Torquoise", "Apples", "Grapes", "Strawberries"), 10)
v3
typeof(v3)
m4 <- matrix(1:20, nrow = 5)
m4
typeof(m4)
df4 <- as.data.frame(m4)
df4
typeof(df4)
v5a <- 1:4
v5b <- 1:20
v5c <- 1:5
df51 <- cbind.data.frame(v5a,v5b,v5c)
df51
v5af <- as.factor(c(1:4))
v5af
df52 <- cbind.data.frame(v5af, v5b, v5c)
df52
str(df52)
str(df51)
df6 <- cbind.data.frame(v5af, v5b, v5c)
df6$v5af <- factor(df6$v5af,
levels = c(1,2,3,4),
labels = c("Bread", "Yogurt", "Milk", "Coffee"))
df6
typeof(df6$v5af)
str(df6)
library(tidyverse)
library(ggpubr)
library(rstatix)
(X>2)
x <- 1:4
(X>2)
x <- 1:4
(x > 2)
summary(model)
#linear regression model
#model <- lm(log_Unemployment_Rate~y_transform,data=global_edu_filtered)
model <- lm(log_Unemployment_Rate ~ transformed_birth_rate, data = global_edu_filtered)
#model summary
summary(model)
#Check for Homoscedasticity
res <- resid(model)
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
#Loading the Data Set
global_edu <- read.csv("Cleaned Global Education.csv")
setwd("C:/Users/Maryl/Downloads/INST 447/Final Project")
#Most of the residuals lie along the diagonal line which shows that the residuals follow
#a normal distribution. A few of the residuals at the tails do not lie along the line,but
#Most of the residuals lie along the diagonal line which shows that the residuals follow
#a normal distribution. A few of the residuals at the tails do not lie along the line,but
#since most of the data lies along the line this assumption is met
#Most of the residuals lie along the diagonal line which shows that the residuals follow
#a normal distribution. A few of the residuals at the tails do not lie along the line,but
#since most of the data lies along the line this assumption is met
#Most of the residuals lie along the diagonal line which shows that the residuals follow
#a normal distribution. A few of the residuals at the tails do not lie along the line,but
#since most of the data lies along the line this assumption is met
#Most of the residuals lie along the diagonal line which shows that the residuals follow
#a normal distribution. A few of the residuals at the tails do not lie along the line,but
#since most of the data lies along the line this assumption is met
#Most of the residuals lie along the diagonal line which shows that the residuals follow
#a normal distribution. A few of the residuals at the tails do not lie along the line,but
#since most of the data lies along the line this assumption is met
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
#Loading the Data Set
global_edu <- read.csv("Cleaned Global Education.csv")
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
#Loading the Data Set
global_edu <- read.csv("Cleaned Global Education.csv")
setwd("C:/Users/Maryl/Downloads/INST 447/Final Project/INST447-Final-Project")
#Loading the Data Set
global_edu <- read.csv("Cleaned Global Education.csv")
View("Cleaned Gloabal Education.csv")
#Testing Assumptions
#Check Linearity (scatter plot)
var <-global_edu[,c("Unemployment_Rate", "Birth_Rate")]
plot(x = var$Unemployment_Rate, y= var$Birth_Rate,
xlab = "Unemployment Rate",
ylab = "Birth Rate",
main = "Unemployment Rate vs Birth Rate")
#Applying a nonlinear transformation bc linearity assumption is violated
global_edu$log_Birth_Rate <- log(global_edu$Birth_Rate)
global_edu$log_Unemployment_Rate <- log(global_edu$Unemployment_Rate)
trans_var <-global_edu[,c("log_Unemployment_Rate", "log_Birth_Rate")]
plot(x = trans_var$log_Unemployment_Rate, y= trans_var$log_Birth_Rate,
xlab = "Log Unemployment Rate",
ylab = "Log Birth Rate",
main = "Log Unemployment Rate vs Log Birth Rate")
#Check for Normality
# Check for NA values in the original Birth_Rate column
sum(is.na(global_edu$Birth_Rate))
# Check for zero values in the original Birth_Rate column
sum(global_edu$Birth_Rate == 0, na.rm = TRUE)
# Check for NA, Inf, or NaN values in the log-transformed column
sum(is.na(global_edu$log_Birth_Rate))
sum(is.infinite(global_edu$log_Birth_Rate))
sum(is.nan(global_edu$log_Birth_Rate))
global_edu$Birth_Rate[global_edu$Birth_Rate == 0] <- 0.0001
global_edu$log_Birth_Rate <- log(global_edu$Birth_Rate)
global_edu$Unemployment_Rate[global_edu$Unemployment_Rate == 0] <- 0.0001
global_edu$log_Unemployment_Rate <- log(global_edu$Unemployment_Rate)
qqnorm(global_edu$log_Birth_Rate)
qqline(global_edu$log_Birth_Rate)
#The points from a straight diagonal line, this assumption is met
qqnorm(global_edu$log_Unemployment_Rate)
qqline(global_edu$log_Unemployment_Rate)
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
library(tidyverse)
install.packages("rcompanion")
library(rcompanion)
library(car)
#Loading the Data Set
global_edu <- read.csv("Cleaned Global Education.csv")
View("Cleaned Gloabal Education.csv")
#Testing Assumptions
#Check Linearity (scatter plot)
var <-global_edu[,c("Unemployment_Rate", "Birth_Rate")]
plot(x = var$Unemployment_Rate, y= var$Birth_Rate,
xlab = "Unemployment Rate",
ylab = "Birth Rate",
main = "Unemployment Rate vs Birth Rate")
#Relationship between the Birth Rate and Unemployment Rate is non-linear
#Applying a nonlinear transformation bc linearity assumption is violated.
#I will use the log to transform the data
#There are zeros, going the log of 0, gets infinite value, will remove the zeros
# Count how many zeros are in the Birth_Rate column
zero_count <- sum(global_edu$Birth_Rate == 0, na.rm = TRUE)
print(paste("Number of zeros in Birth_Rate:", zero_count))
#1 zero in birth rate
# Count zeros in Birth_Rate
birth_zero_count <- sum(global_edu$Birth_Rate == 0, na.rm = TRUE)
print(paste("Number of zeros in Birth_Rate:", birth_zero_count))
print(paste("Percentage of zeros in Birth_Rate:", round((birth_zero_count / nrow(global_edu)) * 100, 2), "%"))
#1 zero which is 0.91% of dataset, will remove the 1 of the rows
# Count zeros in Unemployment_Rate
unemployment_zero_count <- sum(global_edu$Unemployment_Rate == 0, na.rm = TRUE)
print(paste("Number of zeros in Unemployment_Rate:", unemployment_zero_count))
print(paste("Percentage of zeros in Unemployment_Rate:", round((unemployment_zero_count / nrow(global_edu)) * 100, 2), "%"))
#1 zero which is 0.91% of dataset, will remove the 1 of the rows
#Removing zeros from Birth_Rate
global_edu_temp <- global_edu[global_edu$Birth_Rate > 0, ]
print(paste("Rows after removing zero Birth_Rate:", nrow(global_edu_temp)))
#Removing zeros from Unemployment_Rate
global_edu_filtered <- global_edu_temp[global_edu_temp$Unemployment_Rate > 0, ]
print(paste("Rows after also removing zero Unemployment_Rate:", nrow(global_edu_filtered)))
# Total rows removed
total_removed <- nrow(global_edu) - nrow(global_edu_filtered)
print(paste("Total rows removed:", total_removed))
print(paste("Percentage of data removed:", round((total_removed/nrow(global_edu))*100, 2), "%"))
global_edu_filtered$log_Birth_Rate <- log(global_edu_filtered$Birth_Rate)
global_edu_filtered$log_Unemployment_Rate <- log(global_edu_filtered$Unemployment_Rate)
#scatter plot after data was transformed
log_var <-global_edu_filtered[,c("log_Unemployment_Rate", "log_Birth_Rate")]
plot(x = log_var$log_Unemployment_Rate, y= log_var$log_Birth_Rate,
xlab = "Log Unemployment Rate",
ylab = "Log Birth Rate",
main = "Log Unemployment Rate vs Log Birth Rate")
#Check for Normality
qqnorm(global_edu_filtered$log_Birth_Rate)
qqline(global_edu_filtered$log_Birth_Rate)
#Most of the data in the middle lies along the line
#however towards the tails the data starts to deviate away from the diagonal line
#Data transformation
#y_transform <- transformTukey(global_edu_filtered$log_Birth_Rate)
global_edu_filtered$transformed_birth_rate <- transformTukey(global_edu_filtered$log_Birth_Rate)
qqnorm(y_transform)
global_edu_filtered$transformed_birth_rate <- transformTukey(global_edu_filtered$log_Birth_Rate)
qqnorm(transformed_birth_rate)
global_edu_filtered$transformed_birth_rate <- transformTukey(global_edu_filtered$log_Birth_Rate)
qqnorm(transformed_birth_rate)
qqnorm(global_edu_filtered$log_Birth_Rate)
qqline(global_edu_filtered$log_Birth_Rate)
global_edu_filtered$transformed_birth_rate <- transformTukey(global_edu_filtered$log_Birth_Rate)
qqnorm(transformed_birth_rate)
#Data transformation
transformed_Birth_Rate <- transformTukey(global_edu_filtered$log_Birth_Rate)
#global_edu_filtered$transformed_birth_rate <- transformTukey(global_edu_filtered$log_Birth_Rate)
qqnorm(transformed_Birth_Rate)
qqline(transformed_Birth_Rate)
model <- lm(log_Unemployment_Rate ~ transformed_Birth_Rate, data = global_edu_filtered)
